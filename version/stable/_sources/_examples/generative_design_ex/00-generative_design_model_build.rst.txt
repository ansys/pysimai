
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples/generative_design_ex/00-generative_design_model_build.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download__examples_generative_design_ex_00-generative_design_model_build.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_generative_design_ex_00-generative_design_model_build.py:

.. _ref_generative_design_model_build_reuse:

Script 1 - Building a model to generate new designs
===================================================

This example demonstrates how to configure, train and build a model that will generate new designs.

.. GENERATED FROM PYTHON SOURCE LINES 33-35

Import necessary libraries
--------------------------

.. GENERATED FROM PYTHON SOURCE LINES 35-42

.. code-block:: Python


    import os

    import ansys.simai.core
    from ansys.simai.core.data.geomai.models import GeomAIModelConfiguration
    from ansys.simai.core.errors import NotFoundError


.. GENERATED FROM PYTHON SOURCE LINES 43-47

Create the client
-----------------
Create a client to use the PySimAI library. This client will be the
entrypoint of all "SimAI" and "GeomAI" objects.

.. GENERATED FROM PYTHON SOURCE LINES 47-50

.. code-block:: Python


    simai = ansys.simai.core.SimAIClient(organization="my_organization")


.. GENERATED FROM PYTHON SOURCE LINES 51-55

Configure the client
--------------------
Generative design objects are not part of a separate client to instantiate
— they are exposed via the `geomai` property of a configured SimAIClient.

.. GENERATED FROM PYTHON SOURCE LINES 55-59

.. code-block:: Python


    client = simai.geomai



.. GENERATED FROM PYTHON SOURCE LINES 60-63

Find or create a "GeomAI" Project
---------------------------------
List all the projects available in the client instance:

.. GENERATED FROM PYTHON SOURCE LINES 63-67

.. code-block:: Python


    print(client.projects.list())



.. GENERATED FROM PYTHON SOURCE LINES 68-69

Retrieve your project by its name or create it if it does not exist:

.. GENERATED FROM PYTHON SOURCE LINES 69-79

.. code-block:: Python


    my_dataset_path = "path/to/your/data/folder"
    my_project_name = "new-bracket-project"

    try:
        project = client.projects.get(name=my_project_name)
    except NotFoundError:
        project = client.projects.create(my_project_name)



.. GENERATED FROM PYTHON SOURCE LINES 80-81

Set the retrieved project as the current project:

.. GENERATED FROM PYTHON SOURCE LINES 81-86

.. code-block:: Python


    client.set_current_project(my_project_name)
    print(client.current_project)



.. GENERATED FROM PYTHON SOURCE LINES 87-90

Add the training data to the current project
--------------------------------------------
Display the number of data in the current project and list them all:

.. GENERATED FROM PYTHON SOURCE LINES 90-95

.. code-block:: Python


    print(len(project.data()))
    print(project.data())



.. GENERATED FROM PYTHON SOURCE LINES 96-100

To add the training data to the current project:

- | If the training data has never been uploaded to the server,
  | use the following script:

.. GENERATED FROM PYTHON SOURCE LINES 100-113

.. code-block:: Python


    for geometry_data_name in os.listdir(my_dataset_path):
        geometry_data_file = os.path.join(my_dataset_path, geometry_data_name)
        try:
            td = client.training_data.create_from_file(file=geometry_data_file, project=project)
            print(f"Uploaded {geometry_data_name} -> ID: {td.id}")
        except Exception as e:
            print(f"Failed to upload {geometry_data_name}: {e}")

    for data in project.data():
        print(data.name)



.. GENERATED FROM PYTHON SOURCE LINES 114-117

- If the training data already exists on the server, do as follows:

Step 1. Get the project by name:

.. GENERATED FROM PYTHON SOURCE LINES 117-120

.. code-block:: Python


    project_with_TD = client.projects.get(name="bracket-project")


.. GENERATED FROM PYTHON SOURCE LINES 121-122

Step 2. Get all training data in that project:

.. GENERATED FROM PYTHON SOURCE LINES 122-125

.. code-block:: Python


    data_items = project_with_TD.data()


.. GENERATED FROM PYTHON SOURCE LINES 126-128

Step 3. Print the desired number of training data to add:
(5 in this example)

.. GENERATED FROM PYTHON SOURCE LINES 128-134

.. code-block:: Python


    for td in data_items[:5]:
        print(f"{td.id}: {td.name}")

    training_data_list = data_items[:5]


.. GENERATED FROM PYTHON SOURCE LINES 135-136

Step 4. Add each data item to the current project:

.. GENERATED FROM PYTHON SOURCE LINES 136-145

.. code-block:: Python


    for td in training_data_list:
        try:
            td.add_to_project(project)
            print(f"✅ Added {f'{td.id}: {td.name}'} to current project.")
        except Exception as e:
            print(f"❌ Failed to add {f'{td.id}: {td.name}'}: {e}")



.. GENERATED FROM PYTHON SOURCE LINES 146-149

Remove data from the project
----------------------------
Use the script below to remove data from the project:

.. GENERATED FROM PYTHON SOURCE LINES 149-158

.. code-block:: Python


    for data in project.data():
        try:
            data.remove_from_project(project)
            print(f"Removed: {data.name}")
        except Exception as e:
            print(f"Could not remove {data.name}: {e}")



.. GENERATED FROM PYTHON SOURCE LINES 159-161

Check the result of the removal by displaying the number of data in the
current project and listing them all:

.. GENERATED FROM PYTHON SOURCE LINES 161-166

.. code-block:: Python


    print(len(project.data()))
    print(project.data())



.. GENERATED FROM PYTHON SOURCE LINES 167-169

Set a model configuration for the newly created project and build the model
---------------------------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 172-173

Create a model configuration:

.. GENERATED FROM PYTHON SOURCE LINES 173-180

.. code-block:: Python


    configuration = GeomAIModelConfiguration(
        nb_epochs=2,
        # or build_preset: 'debug', 'short', 'default' or 'long'
        nb_latent_param=2,  # Required: Must be between 2 and 256
    )


.. GENERATED FROM PYTHON SOURCE LINES 181-182

Build the model:

.. GENERATED FROM PYTHON SOURCE LINES 182-185

.. code-block:: Python


    model = simai.geomai.models.build(project, configuration)


.. GENERATED FROM PYTHON SOURCE LINES 186-187

Print the result:

.. GENERATED FROM PYTHON SOURCE LINES 187-189

.. code-block:: Python


    print(f"Model started: {model.id} in project {project.name}")


.. _sphx_glr_download__examples_generative_design_ex_00-generative_design_model_build.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 00-generative_design_model_build.ipynb <00-generative_design_model_build.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 00-generative_design_model_build.py <00-generative_design_model_build.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 00-generative_design_model_build.zip <00-generative_design_model_build.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
